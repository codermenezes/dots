#!/bin/bash

myfind() {
  FFOUND_PWD=${PWD}
  FFOUND=($(myfff $1 $2))
  print_found
}

myfff() {
    find . -iname "*$2*" -type "$1"
}

print_found() {
  if [ "${#FFOUND[*]}" -eq 0 ]; then return; fi
  local index=1
  echo ${FFOUND[*]} | tr -s ' ' '\n' | while read line; do
  if [ -t 1 ]; then printf "% 4d " $index; fi
  echo $line
  index=$((index + 1))
done
}

lf() { print_found; }

fff() { myfff "f" "$1"; }

ggfcode() {
    if [ "$1" == "help" ]; then
        echo "Usage: fcode <code> <file_pattern>"
        echo "       fcode signedIn .java"
        return;
    fi
    gg;
    gg_grep_code $1 $2;
}
ggfclass() {
    gg;
    find_on_dir "ecom" $1;
    find_on_dir "components" $1;
}
gg_grep_code() {
    find_on_dir "ecom" $2 | xargs grep -in $1;
    find_on_dir "components" $2 |xargs grep -in $1;
}

find_on_dir() {
    find $1 -iname "*$2*" -type "f" | grep -v test | grep -v bin;
}

fcode() {
    find_on_dir "." $2 | xargs grep -in $1;
}

ff() { myfind "f" "$1"; }

fd() { myfind "d" "$1"; }

fn() {
    echo ${FFOUND};

  [ ! -z ${FFOUND[$1-1]} ] && echo ${FFOUND_PWD}/${FFOUND[$1-1]};
}

vf() { vim $(fn "$1"); }

d() { cd $(dirname $(fn "$1")); }

c() { cat $(fn "$1"); }

edit() {
  vim $HOME/.dots/bash/conf/$1
}

scaffold() {
  vraptor scaffold $*;
  prj=`findproject`;
  echo "[$prj] vraptor scaffold $*" >> ~/vraptor-scaffold.log;
}

findproject() {
  echo ${PWD} | awk -F'/' '{ print $(NF) }';
}

awkk() {
    awk -F"$1" "{ print \$$2 }";
}
pkg-run() {
  mvn clean;
  mvn package;
  echo "\n\nBUILD IS DONE ===> STARTING SERVER...\n\n";
  sh target/bin/webapp;
}

mvn_create() {
  mvn archetype:generate -DgroupId=$1 -DartifactId=$1 -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false;
}

ps() {
  /bin/ps -$1;
}

eclipseupdate(){
  mvn eclipse:eclipse;
}

fixsubtitles() {
  for i in $(ls -1 *.avi) 
  do 
    name=`echo $i | cut -d'.' -f1,2,3,4`;
    oldfile=`find . -iname "$name*.srt"`; 
    newfile=`echo $i | awk -F'.avi' '{ print $1 }'`; 
    mv $oldfile $newfile.srt;
  done
}

awkp() {
    param1=$1;
    awkparam="{ print \$$param1 }";
    awk "$awkparam";
}

resolve_ecom() {
    echo "Fixing perl..."
    gg;
    cd build/buildeng;
    sed 's/<env key="VERSIONER_PERL_VERSION" value="5.8.9"\/>//' <dependency.xml > dependency-tmp.xml; 
    mv dependency-tmp.xml dependency.xml;
    br;
    echo "rake components";
    echo
    echo
    echo
    rake components;
    echo "rake ecom";
    echo
    echo
    echo
    rake ecom;
    echo "Checking out original dependency.xml back"
    gg;
    cd build/buildeng;
    git checkout dependency.xml;
}

setup_eclipse_tomcat() {
    cd $HOME/tmp/workspaces/build/buildeng;
    ./ant -Dalias=ecom -Dno.svn.access=true clean-tomcat-eclipse tomcat-eclipse
}

upi() {
    echo $1 >> ~/setup.bkp/install.sh;
}

poadb() {
  sqlplus $1/$1@10.27.15.4:1521/GIDSOLD1;
}

cw() {
  if [ "$1" != "" ]; then
    cd $1;
    export WORK_DIR=`pwd`;
  else                   
    cd $WORK_DIR;
  fi
}  

mvnpublish() {
    mvn clean deploy; 
    echo ">>>>>>>>>>> deploy done"
    echo
    echo
    mvn release:clean;
    echo ">>>>>>>>>>> release clean done"
    echo 
    echo
    mvn release:prepare;
    echo ">>>>>>>>>>> release prepare done"
    echo 
    echo
    mvn release:perform;
    echo ">>>>>>>>>>> release perform done"
    echo 
    echo
}

changed_files() {
    git log --grep="$1" --name-only --pretty="%n" | sort -u
}

getuser() {
    http GET http://serverstatus.gid.gap.com/getuser.php?accountname=$1 | grep "Name\|Email" | \
        awk -F "<br>" '{sub(/</,""); print $2,$3}' | \
        awk -F "<font color=blue>" '{print $1 $2}'
}

deploy_status() {
    git lg origin/master ^heroku/master;
}

convert_to_utf() {
    iconv -f iso-8859-15 -t utf-8 $1 > $2;
}

add_line_after_pattern_to_all() {
    for i in $(fff $3)
    do
        add_line_after "$1" "$2" "$i" > /tmp/addLineAfter
        mv /tmp/addLineAfter $i;
    done
}

add_line_after() {
    /usr/bin/awk -v pattern="$1" -v new_line="$2" '{ print $0; if ( $0 ~ pattern ) { print new_line; } }' < $3
}

