#!/usr/bin/env bash

export CODECLIMATE_DISABLED=true
export PROFILE_DISABLED=true

alias ccli="cd ~/codeclimate/"
alias cc-docker="docker-compose --file docker-compose.yml --file docker-compose.docker-sync.yml"
alias dsync="cd ~/codeclimate/harness && chruby 2.3.0 && gem_home . && docker-sync start"
alias docker-dir="cd /Users/filipe/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/Docker.qcow2"

alias ogc='open -a Google\ Chrome --args --disable-web-security'
alias vpsql="dc run --rm postgres psql postgres://postgres@postgres/velocity_development"
alias vconsole="dc run --rm web rails c"
alias vbash="dc run --rm web bash"
alias vtbash="dc -f docker-compose.test.development.yml run --rm app bash"
alias qdc="docker-compose --file ../harness/docker-compose.yml --file ../harness/docker-compose.docker-sync.yml"

setup-velocity() {
  set -x
  docker-compose stop
  docker-compose rm -f
  docker volume rm velocity_postgres
  docker-compose build

  docker-compose up -d postgres
  docker-compose run --rm web rake db:create db:structure:load db:migrate benchmark:import
  docker-compose --file docker-compose.test.development.yml run --rm app rake db:create db:structure:load db:migrate benchmark:import
  docker-compose run --rm web rake aws:resources:create
  docker-compose up -d
  docker-compose stop agent_bitbucket
  docker-compose run --rm web rake db:migrate
  docker-compose run --rm web rake db:seed
  docker-compose run --rm web rake elasticsearch:indices:create
  set +x
}

rebuild() {
  local services=$@

  case $1 in
    agent)
      rm agent/Gemfile.lock
      ;;
  esac

  for action in "build" "stop" "rm -f" "up -d"
  do
    echo "docker-compose ${action} ${services}"
    docker-compose $action $services
  done

  case $1 in
    web)
      local process_id=$!
      echo "RUNNING YARN"
      docker-compose run --rm web bash -c "yarn install && rake db:migrate"
      wait $process_id
      ;;
  esac
}

velocity-bash() {
 (
 cd ~/codeclimate/velocity && \
   docker-compose \
     --file docker-compose.test.yml run \
     --volume $PWD:/app \
      --rm app bash  \
 )
}

ccanalyze() {
  CODECLIMATE_DEBUG=1 time codeclimate analyze $@
}

cc-token() {
  cat ~/.ssh/codeclimate_local_api_token
}

cc-http() {
  http $@ "Authentication: Token token=`cc-token`"
}

vt() {
  spec=${@/app\//}
  make app.test RSPEC_ARGS="--fail-fast --profile 0 $spec"
}

mongo-restart () {
  docker-machine start docker-vm
  docker-switch docker-vm
  docker stop mongo
  docker rm mongo
  docker run --restart always --restart always --name mongo -d -p 27017:27017 mongo
}

ip() {
  ifconfig en0 inet | grep inet | awk '{print $2}'
}

clear-logs() {
  local container=$1
  local logfile=$(docker inspect --format='{{.LogPath}}' $container)
  docker run -ti -v /var/lib/docker/containers:/var/lib/docker/containers ubuntu bash -c "truncate -s 0 ${logfile}"
}
