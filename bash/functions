#!/bin/bash

ssh-key() {
  eval $(ssh-agent)
  ssh-add -K
}

log () {
  local fmt="» $1\n"; shift;
  tput setaf 2; printf "\n$fmt" "$@"; tput sgr0;
}

fuzzyfinder() {
  local root=$1
  local fuzzy=$(echo $2 | sed 's/./&*/g')
  local depth=${3:-"2"}
  find ${root} -iname "*${fuzzy}" -type d -maxdepth ${depth}
}

ww() {
  cd $(find -L ~/workspaces/ -type d -maxdepth 3 | selecta -s ${1:-'/'})
}

workspace() {
  cd $(fuzzyfinder ~/workspaces/ ${1})
}

goto() {
  local dir=${1:-"${HOME}"}
  local depth=${2:-"4"}
  cd $(find $dir -type d -maxdepth $depth | selecta)
}

myfind() {
  find ${3:-"."} -iname "*$2*" -type "$1"
}

ff() { myfind "f" "$1" "$2"; }

fd() { myfind "d" "$1" "$2"; }

new-script() {
  local file=$1
  cat > $file <<ENDOFFILE
#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'
ENDOFFILE
  vim $file
  chmod +x $file
}

edit() {
  (cd $HOME/.dots && vim bash/$1)
}

ps() {
  /bin/ps -$1;
}

clear_temp() {
  set -x
  (cd "$HOME/Library/Application Support/Skype" && ff jpg | xargs rm -f)
  set +x
}

mvnpublish() {
  mvn clean deploy; 
  echo ">>>>>>>>>>> deploy done"
  echo
  echo
  mvn release:clean;
  echo ">>>>>>>>>>> release clean done"
  echo 
  echo
  mvn release:prepare;
  echo ">>>>>>>>>>> release prepare done"
  echo 
  echo
  mvn release:perform;
  echo ">>>>>>>>>>> release perform done"
  echo 
  echo
}

convert_to_utf() {
  iconv -f iso-8859-15 -t utf-8 $1 > $2;
}


prj() {
  [[ ! ${1} ]] && cd $(cat ~/.current_project) && return;
  cd ${1};
  echo $(pwd) >  ~/.current_project;
}

cordova_deploy() {
  file=${2:-"www/js/angular-init.js"}
  temp_file="/tmp/temp_file"
  ip=$(ifconfig en0 | grep inet | tail -n1 | awk '{print $2}')
  echo "updating server ip to ${ip}"
  cat $file | sed "s/localhost/${ip}/" > $temp_file 
  mv $temp_file $file
  echo "build ${1}"
  cordova build ${1}
  echo "run ${1}"
  cordova run ${1}
  echo "reverting server ip"
  cat $file | sed "s/${ip}/localhost/" > $temp_file 
  mv $temp_file $file
}

concentrate() {
  (cd /Volumes/HD/bkp_macpipo/Music/ && herrie -p Dream\ Theater/ dream_theater/ Foo\ Fighters/ Eric\ Clapton/)
}

log() { echo $@ 1>&2; }

resize() {
  local size=$1
  convert  -resize $size -background none -extent ${size}x${size} -gravity center $2 $3
}

from-icon() {
  convert ${1} -resize 60x60 -size 960x640 xc:white +swap -gravity center -composite ${2}-land.png
  convert ${1} -resize 60x60 -size 640x960 xc:white +swap -gravity center -composite ${2}-port.png
}

convert-keep-black-curve() {
  local file=$1
  convert ${file} -fill transparent -fuzz 20% +opaque "#000000" -statistic Median 2 ${file%.*}.1.png
}

convert-black-to-white() {
  local file=$1
  convert ${file} -fuzz 19% -fill white -opaque black ${file%.*}.1.png
}

new-ruby-project() {
  [[ "${1}" == "" ]] && echo "Usage: new-ruby-project <project_name>" && return
  git clone --depth=1 git@github.com:DivineDominion/rspec-guard-spork-boilerplate.git $1
  cd $1
  rm -r .git
}

gemset-init() {
  echo '.gems' > .rbenv-gemsets
}

export-spectacle() {
  for key in MakeLarger \
    MakeSmaller \
    MoveToBottomHalf \
    MoveToCenter \
    MoveToFullscreen \
    MoveToLeftHalf \
    MoveToLowerLeft \
    MoveToLowerRight \
    MoveToNextDisplay \
    MoveToNextThird \
    MoveToPreviousDisplay \
    MoveToPreviousThird \
    MoveToRightHalf \
    MoveToTopHalf \
    MoveToUpperLeft \
    MoveToUpperRight \
    RedoLastMove \
    UndoLastMove; \
  do
    value=$(defaults read com.divisiblebyzero.Spectacle ${key} | sed 's/[^0-9a-f]//g')
    echo "defaults write com.divisiblebyzero.Spectacle ${key} -data ${value}"
  done
}

export-karabiner() {
  /Applications/Karabiner.app/Contents/Library/bin/karabiner export
}

docker_vnc() {
  open 'vnc://192.168.59.103:5900'
}

cnpj-login() {
  local _cnpj=$(cnpj | sed -E 's/[\.\/\­]//g')
  echo ${_cnpj}
  echo ${_cnpj} | pbcopy
}

cnpj-password() {
  echo 'Fg227481' |pbcopy
}

android-gen-key() {
  local filename=${1:-"debug"}
  local alias=${2:-"android"}
  echo "File ${filename} Alias ${alias}"
  keytool -genkey -v -keystore ${filename}.keystore -alias ${alias} -keyalg RSA -keysize 2048 -validity 10000
}

export COUNT=0
increment() {
  COUNT=$(($COUNT + 1))
  echo $COUNT
}

disable-android-file-transfer() {
  PID=$(ps -fe | grep "[A]ndroid File Transfer Agent" | awk '{print $2}')
  if [[ -n $PID ]]
  then
    kill $PID
  fi
  mv "/Applications/Android File Transfer.app/Contents/Resources/Android File Transfer Agent.app" "/Applications/Android File Transfer.app/Contents/Resources/Android File Transfer Agent DISABLED.app"
  mv "${HOME}/Library/Application Support/Google/Android File Transfer/Android File Transfer Agent.app" "${HOME}/Library/Application Support/Google/Android File Transfer/Android File Transfer Agent DISABLED.app"
  osascript -e 'tell application "System Events" to delete every login item whose name is "Android File Transfer Agent"'
}

mov2mp4() {
  ffmpeg -i ${1} -vcodec h264 -acodec aac -strict -2 ${2}
}

ok() {
  local msg="display notification \"${1:-"..."}\" with title \"OK\""
  osascript -e "${msg}"
  play -v2 /System/Library/Sounds/Funk.aiff > /dev/null 2>&1
}

ohno() {
  local msg="display notification \"Oh no!\" with title \"Oops\""
  osascript -e "${msg}"
  say 'Oh no;'
}

ntfy() {
  set -x
  local msg="display notification \"${@}\" with title \"Heads up!\""
  osascript -e "${msg}"
  set +x
}


remove-focus() {
  for i in $(ag -l "focus:true"); do sed -i '' -E 's/, focus:true//' $i; done;
}

ec2() {
  local ip=$1
  local port=${2:-3000}
  ssh -L $port:$ip:$port -A -i ~/.ssh/ubuntu-2018-05-8.pem ubuntu@$ip
}

beep() {
  osascript -e 'beep'
}

count() {
  MY_COUNT=${MY_COUNT:-0}
  MY_COUNT=$(expr $MY_COUNT + ${1:-1})
  echo $MY_COUNT
  export MY_COUNT
}

reset-count() {
  export MY_COUNT=0
}

sayit() {
  echo -n " ${1}"
  (say ${1} &) > /dev/null
}

stop-watch() {
  local i=${1:-20}
  local msg=${2:-"Go!"}

  echo
  sayit "${msg}"

  while [ $i -gt 0 ]
  do
    sleep 1

    if [ $((${i} % 5)) == "0" ] || [ ${i} -le 3 ]
    then
      sayit "${i}"
    else
      echo -n " ${i}"
    fi

    i=$[$i-1]
  done

  sleep 1
}

exercise() {
  for i in $(seq ${1:-"10"})
  do
    echo
    sayit "Round ${i}"
    sleep 1
    stop-watch ${2:-"20"} "go!"
    stop-watch 3 "rest"
  done
}
