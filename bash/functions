#!/bin/bash

fuzzyfinder() {
  local root=$1
  local fuzzy=$(echo $2 | sed 's/./&*/g')
  find ${root} -iname "*${fuzzy}" -type d -maxdepth 1
}

goto() {
  local dir=${1:-"${HOME}"}
  local depth=${2:-"4"}
  cd $(find $dir -type d -maxdepth $depth | selecta)
}

myfind() {
  find . -iname "*$2*" -type "$1"
}

ff() { myfind "f" "$1"; }

fd() { myfind "d" "$1"; }

edit() {
  (cd $HOME/.dots && vim bash/conf/$1)
}

ps() {
  /bin/ps -$1;
}

mvnpublish() {
  mvn clean deploy; 
  echo ">>>>>>>>>>> deploy done"
  echo
  echo
  mvn release:clean;
  echo ">>>>>>>>>>> release clean done"
  echo 
  echo
  mvn release:prepare;
  echo ">>>>>>>>>>> release prepare done"
  echo 
  echo
  mvn release:perform;
  echo ">>>>>>>>>>> release perform done"
  echo 
  echo
}

convert_to_utf() {
  iconv -f iso-8859-15 -t utf-8 $1 > $2;
}


prj() {
  [[ ! ${1} ]] && cd $(cat ~/.current_project) && return;
  cd ${1};
  echo $(pwd) >  ~/.current_project;
}

cordova_deploy() {
  file=${2:-"www/js/angular-init.js"}
  temp_file="/tmp/temp_file"
  ip=$(ifconfig en0 | grep inet | tail -n1 | awk '{print $2}')
  echo "updating server ip to ${ip}"
  cat $file | sed "s/localhost/${ip}/" > $temp_file 
  mv $temp_file $file
  echo "build ${1}"
  cordova build ${1}
  echo "run ${1}"
  cordova run ${1}
  echo "reverting server ip"
  cat $file | sed "s/${ip}/localhost/" > $temp_file 
  mv $temp_file $file
}

concentrate() {
  (cd /Volumes/HD/bkp_macpipo/Music/ && herrie -p Dream\ Theater/ dream_theater/ Foo\ Fighters/ Eric\ Clapton/)
}

log() { echo $@ 1>&2; }

resize() {
  local size=$1
  convert  -resize $size -background white -extent ${size}x${size} -gravity center $2 $3
}

new-ruby-project() {
  [[ "${1}" == "" ]] && echo "Usage: ${0} <project_name>" && return
  git clone --depth=1 git@github.com:DivineDominion/rspec-guard-spork-boilerplate.git $1
  cd $1
  rm -r .git
}

gemset-init() {
  echo '.gems' > .rbenv-gemsets
}

export-spectacle() {
  for key in MakeLarger \
    MakeSmaller \
    MoveToBottomHalf \
    MoveToCenter \
    MoveToFullscreen \
    MoveToLeftHalf \
    MoveToLowerLeft \
    MoveToLowerRight \
    MoveToNextDisplay \
    MoveToNextThird \
    MoveToPreviousDisplay \
    MoveToPreviousThird \
    MoveToRightHalf \
    MoveToTopHalf \
    MoveToUpperLeft \
    MoveToUpperRight \
    RedoLastMove \
    UndoLastMove; \
  do
    value=$(defaults read com.divisiblebyzero.Spectacle ${key} | sed 's/[^0-9a-f]//g')
    echo "defaults write com.divisiblebyzero.Spectacle ${key} -data ${value}"
  done
}

export-karabiner() {
  /Applications/Karabiner.app/Contents/Library/bin/karabiner export
}
