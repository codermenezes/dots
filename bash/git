# vim: ft=sh

#add autocomplete for g alias
alias gs="g st; false"
alias issues='hub browse -- issues'
complete -o bashdefault -o default -o nospace -F _git g

g() {
  [[ "$1" == "g" ]] && shift
  git $@
}

git_current_branch() {
  git rev-parse --abbrev-ref HEAD
}

git_branch() {
  echo $( __git_ps1 | sed -E 's/.{2}(.*).{1}/\1/' )
}
git_not_pushed(){
    branch=$( __git_ps1 | sed -E 's/.{2}(.*).{1}/\1/' )
    not_pushed=$(git log --pretty="%h" origin/${branch}..${branch} 2>/dev/null | wc -l | xargs)
    [[ "$not_pushed" != "0" ]] && echo "(${not_pushed} commits ahead)" || echo " "
}

fix_repo() {
  repo=${1:-"bitbucket_tw"}
  new_repo_line=$(git remote -v | grep origin | head -n1 | sed "s/bitbucket.org/${repo}/" | cut -d" " -f1)
  git remote rm origin
  git remote add $new_repo_line
  git fetch origin 
  git branch --set-upstream-to=origin/master master
  git remote -v
}

hub_browse() {
  hub browse -- blob/master/`ff ${1}`
}

git-delete-old-branches() {
  git branch | grep "fe/" | xargs git branch -D
  git remote prune origin
  remote_branches=$(git branch --remote | grep "origin/fe/")
  for i in $remote_branches
  do
    echo -n "Delete remote branch \"$i\" ? [y/n]"
    read remove
    [[ "$remove" == "y" ]] && git push origin :${i//origin\//}
  done
}

eval "$(hub alias -s)"
